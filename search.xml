<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[开学了]]></title>
    <url>%2F2017%2F09%2F09%2F%E5%BC%80%E5%AD%A6%E4%BA%86%2F</url>
    <content type="text"><![CDATA[来到上海半个多月了，一切事情算是有了结果，生活也应该渐渐稳定了。 我从来都不愿去诉说自己悲惨的生活和各式的遭遇，也不敢夸大自己付出了多少努力，有多少委屈。我只是一直以来都清醒地认识到这就是生活，生活从来都是不易的。我时刻记住这一点，并尽力摆脱自怜想法。很多时候，的确是很难过了，累的不想做一切事，可是就这么静静看着时间流逝，也觉得自己的罪过又更深了。其实我知道，这一切根本不算什么，我从未逼自己去达到某一个极限。我知道很多事情，但我尽量避免再去深究过多的东西，我不再想去发现这个世界的本质了，我怕我发现之后就再也不能好好生活了。就如同那些早早死去的诗人们，他们一定是发现了什么，于是利用死亡来解脱。可是我还不能死，也不想死。基于这一点，在起伏不定的情绪中挣扎起来后，我只好又想办法如何能够活下去，这常常又让我感到无比的悲哀。我又是一个如此纠结的人，我又想活得有尊严一点，经历那些屈辱的地方和事情，我不能忍受。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>学校</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html中name、id、class的区别]]></title>
    <url>%2F2017%2F08%2F28%2Fhtml%E4%B8%ADname%E4%B8%8Eid%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[name 属性用于在 JavaScript 中对元素进行引用，或者在表单提交之后，对表单数据进行引用。 html的name和id可以类比身份证的姓名和身份证编号编号id具有唯一性，一个id只出现一次。名称name具备可重复性，可以多次出现。在css中两者都具备识别html元素的作用，name用点号.表示，id用井号#一般name用于通用多次出现元素的样式定义，id用于唯一性元素样式定义。在表单当中，由于有些控件具备多元素特性，例如radio checkbox等，使用id不便于表单数据的提交，此外浏览器会根据name来设定发送到服务器的request，因此在表单当中，用name来提交数据。当然，在实际的html中，也完全可以不用id，用单独的class也可以起到代替id的作用。但是在js中，是无法通过class直接后去html元素的， 定义id便于相关操作。 id要符合标识的要求，比如大小写敏感，最好不要包含下划线（因为不兼容CSS）。而name基本上没有什么要求，甚至可以 用数字。table、tr、td、div、p、span、h1、li等元素一般用id。与表单相关的元素也可以赋ID值, 但为这些元素赋ID值的时候引用这些元素的方法就要变一下了，具体的如下：赋name时引用元素的方式: document.formName.inputName或document.frames(“frameName”)赋id时引用元素的方式: document.all.inputID或document.all.frameID除去与表单相关的元素，只能赋id不能赋name，这些元素有body、li、a、table、tr、td、th、p、div、span、pre、dl、dt、dd、font、b等等对于name和class来说意义是一样的。但是name主要是提交表单用的 ，而class是设置标签的类，用于指定元素属于何种样式的类，主要用来设置css样式的。但两种都可以用来识别css，推荐除了表单外都用class。 name的用途 用途1: 主要是用于获取提交表单的某表单域信息， 作为可与服务器交互数据的HTML元素的服务器端的标示，比如input、select、textarea、框架元素(iframe、frame、 window的名字，用于在其他frame或window指定target ) 和button等，这些元素都与表单(框架元素作用于form的target)提交有关，浏 览器会根据name来设定发送到服务器的request， 在表单的接收页面只接收有name的元素, 所以赋ID的元素通过表单是接收不到值的。 我们可以在服务器端根据其Name通过Request.Params取得元素提交的值。在form里面，如果不指定Name，就不会发送到服务器端 。 用途2: HTML元素Input type=’radio’分组，我们知道radio button控件在同一个分组类，check操作是mutex的，同一时间只能选中一个radio，这个分组就是根据相同的Name属性来实现的。 用途3: 建立页面中的锚点，我们知道link是获得一个页面超级链接，如果不用href属性，而改用Name，如：，我们就获得了一个页面锚点。 用途4: 作为对象的Identity，如Applet、Object、Embed等元素。比如在Applet对象实例中，我们将使用其Name来引用该对象。 用途5: 在IMG元素和MAP元素之间关联的时候，如果要定义IMG的热点区域，需要使用其属性usemap，使usemap=”#name”(被关联的MAP元素的Name)。 用途6: 某些特定元素的属性，如attribute，meta和param。例如为Object定义参数或Meta中。 当然HTML元素的Name属性在页面中也可以起那么一点ID的作用，因为在DHTML对象树中，我们可 以使用document.getElementsByName来获取一个包含页面中所有指定Name元素的对象数组。Name属性还有一个问题，当我们动 态创建可包含Name属性的元素时，不能简单的使用赋值element.name = “…”来添加其Name，而必须在创建Element时，使用document.createElement(‘‘)为元素添加Name属性。 html中name与id的区别 HTML name、id、class 的区别 id name class 区别]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[布尔属性]]></title>
    <url>%2F2017%2F08%2F28%2F%E5%B8%83%E5%B0%94%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[布尔表达式（Boolean expression）是一段代码声明，它最终只有true（真）和false（假）两个取值。最简单的布尔表达式是等式（equality），这种布尔表达式用来测试一个值是否与另一个值相同。 布尔属性是控制元素的某一个状态，是一种比较特别的属性。由于浏览器商之前互相没协商好，因此在定义布尔属性时，也有差异。 布尔属性主要出现 在表单元素上，常见的有radio,checkbox上的checked属性，option元素的selected属性，文本域，文本区，密码域上的readonly属性，select元素上的multiple属性， 并且所有 表单元素都支持disabled属性。 我们在JS设置一个布尔属性是否发挥作用，通常直接设置true与false input.disabled = false由于布尔属性是一种固有属性，因此不能使用removeAttribute进行操作。 而在HTML中，只有我们设置了这个属性，不管它的值是什么，或者干脆就只有属性名，它都认为其值为true。 布尔属性]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[URL编码]]></title>
    <url>%2F2017%2F08%2F27%2FURL%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[URL 只能使用 ASCII 字符集来通过因特网进行发送。由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。URL 不能包含空格。URL 编码通常使用 + 来替换空格。 JavaScript、PHP、ASP 都提供了对字符串进行URL编码的函数。JavaScript 中使用 encodeURI() 函数，PHP 中使用 rawurlencode() 函数，ASP 中使用 Server.URLEncode() 函数。 关于URL编码 URL编码参考手册]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MIME参考手册]]></title>
    <url>%2F2017%2F08%2F24%2FMIME%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。 一、首先，我们要了解浏览器是如何处理内容的。在浏览器中显示的内容有 HTML、有 XML、有 GIF、还有 Flash ……那么，浏览器是如何区分它们，决定什么内容用什么形式来显示呢？答案是 MIME Type，也就是该资源的媒体类型。媒体类型通常是通过 HTTP 协议，由 Web 服务器告知浏览器的，更准确地说，是通过 Content-Type 来表示的，例如: Content-Type: text/HTML 表示内容是 text/HTML 类型，也就是超文本文件。为什么是“text/HTML”而不是“HTML/text”或者别的什么？MIME Type 不是个人指定的，是经过 ietf 组织协商，以 RFC 的形式作为建议的标准发布在网上的，大多数的 Web 服务器和用户代理都会支持这个规范 (顺便说一句，Email 附件的类型也是通过 MIME Type 指定的)。 通常只有一些在互联网上获得广泛应用的格式才会获得一个 MIME Type，如果是某个客户端自己定义的格式，一般只能以 application/x- 开头。 XHTML 正是一个获得广泛应用的格式，因此，在 RFC 3236 中，说明了 XHTML 格式文件的 MIME Type 应该是 application/xHTML+XML。 当然，处理本地的文件，在没有人告诉浏览器某个文件的 MIME Type 的情况下，浏览器也会做一些默认的处理，这可能和你在操作系统中给文件配置的MIME Type有关。比如在Windows下，打开注册表的“HKEY_LOCAL_MACHINESOFTWAREClassesMIMEDatabaseContent Type”主键，你可以看到所有MIME Type的配置信息。 二、在把输出结果传送到浏览器上的时候，浏览器必须启动适当的应用程序来处理这个输出文档。这可以通过多种类型MIME（多功能网际邮件扩充协议）来完成。在HTTP中，MIME类型被定义在Content-Type header中。 例如，架设你要传送一个Microsoft Excel文件到客户端。那么这时的MIME类型就是“application/vnd.ms-excel”。在大多数实际情况中，这个文件然后将传送给Execl来处理（假设我们设定Execl为处理特殊MIME类型的应用程序）。在ASP中，设定MIME类型的方法是通过Response对象的ContentType属性。 多媒体文件格式MIME最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。MIME意为多目Internet邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被HTTP协议支持之后，它的意义就更为显著了。它使得HTTP传输的不仅是普通的文本，而变得丰富多彩。 每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。 常见的MIME类型超文本标记语言文本 .html,.html text/html普通文本 .txt text/plainRTF文本 .rtf application/rtfGIF图形 .gif image/gifJPEG图形 .ipeg,.jpg image/jpegau声音文件 .au audio/basicMIDI音乐文件 mid,.midi audio/midi,audio/x-midiRealAudio音乐文件 .ra, .ram audio/x-pn-realaudioMPEG文件 .mpg,.mpeg video/mpegAVI文件 .avi video/x-msvideoGZIP文件 .gz application/x-gzipTAR文件 .tar application/x-tar Internet中有一个专门组织IANA来确认标准的MIME类型，但Internet发展的太快，很多应用程序等不及IANA来确认他们使用的MIME类型为标准类型。因此他们使用在类别中以x-开头的方法标识这个类别还没有成为标准，例如：x-gzip，x-tar等。事实上这些类型运用的很广泛，已经成为了事实标准。只要客户机和服务器共同承认这个MIME类型，即使它是不标准的类型也没有关系，客户程序就能根据MIME类型，采用具体的处理手段来处理数据。而Web服务器和浏览器（包括操作系统）中，缺省都设置了标准的和常见的MIME类型，只有对于不常见的 MIME类型，才需要同时设置服务器和客户浏览器，以进行识别。 由于MIME类型与文档的后缀相关，因此服务器使用文档的后缀来区分不同文件的MIME类型，服务器中必须定义文档后缀和MIME类型之间的对应关系。而客户程序从服务器上接收数据的时候，它只是从服务器接受数据流，并不了解文档的名字，因此服务器必须使用附加信息来告诉客户程序数据的MIME类型。服务器在发送真正的数据之前，就要先发送标志数据的MIME类型的信息，这个信息使用Content-type关键字进行定义，例如对于HTML文档，服务器将首先发送以下两行MIME标识信息,这个标识并不是真正的数据文件的一部分。Content-type: text/html注意，第二行为一个空行，这是必须的，使用这个空行的目的是将MIME信息与真正的数据内容分隔开。 官方的 MIME 信息是由 Internet Engineering Task Force (IETF) 在下面的文档中提供的：RFC-822 Standard for ARPA Internet text messagesRFC-2045 MIME Part 1: Format of Internet Message BodiesRFC-2046 MIME Part 2: Media TypesRFC-2047 MIME Part 3: Header Extensions for Non-ASCII TextRFC-2048 MIME Part 4: Registration ProceduresRFC-2049 MIME Part 5: Conformance Criteria and Examples不同的应用程序支持不同的 MIME 类型。 http://www.w3school.com.cn/media/media_mimeref.asp]]></content>
  </entry>
  <entry>
    <title><![CDATA[html表单]]></title>
    <url>%2F2017%2F08%2F24%2Fhtml%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"><![CDATA[HTML表单用来对用户的操作作出反应，搜集不同类型的用户输入与后端进行通信，是形成动态页面的主要途径。 &lt;form&gt;标签用于创建供用户输入的HTML表单，其主要作用是收集其中表单元素的提交内容，并根据不同属性作出不同的操作。表单元素虽然可以单独编写，但是&lt;form&gt;就是给页面上不同功能的表单分组的作用，并将其中的元素相关联，变成一个特定的收集用户提交内容的功能区块,它可以用来包括所有的其它的表单元素。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客建成总结]]></title>
    <url>%2F2017%2F08%2F08%2Fpost%2F</url>
    <content type="text"><![CDATA[经过一个多星期的折腾才把这个个人博客给弄好了，想着必须要写点什么了。 其实能够拥有一个个人网站是我很早以前就有的梦想，那时候我还并未坚定地想要走IT这条路，对于这些编程、网页设计之类的技术总是觉得难以企及。而当时的我，越是觉得难就越是不愿或是不敢去认真学习。而现在看来从前大部分的失意皆不过是对于未来方向的迷惘，在一个人没有确定的方向时，他无法使出全部的力量，毕竟后来我们都不是高中生了，只为了高考一个目标奋斗。 而之所以选择IT这条路，虽然我不想承认，但是的确有跟风的心理，谁都知道现在互联网前景最好而且最赚钱，有那么多专业跟计算机不搭边的人都想要转到互联网行业了，更何况我的专业还是算计算机专业之内的。我是一个贪心的人，我想要去赚很多钱来满足我的各种经济需求，我想要去学习很多很多有趣的东西成为一个很酷的人，可是一个人的精力能有多少呢，有些梦想太过于虚幻而难以实现，也许我从来都未真正的弄清自己究竟想要什么，我只是一个自负而迷茫的傻瓜。所以，既然不知道以后要干嘛，那就跟风吧，毕竟大方向不会错还能赚钱；既然想要学的东西那么多，那就从最酷的学起吧，毕竟是高新科技，还能被外行投以惊奇和羡慕的目光。 当我后来慢慢决定了走这条路之后，我就不断地告诉自己，除了那些功利化的思想，更重要的是兴趣，兴趣才能让我走得更长久。我不得不承认，编程真的会令人感到快乐，特别是当成功地实现了某个功能或者解决了某个bug，获得的成就感让人浑身舒畅。我想我现在是真的喜欢做IT这件事了，这又酷又有趣，我愿意为它付出一辈子。 然而我现在依然是一个很菜的菜鸟，许多很基础的东西都不懂，这都是过去没有认真学习的错，我只能从头开始一点一点的前进。 而搭博客的事我从未想过，只不过是前几天在学习git的时候了解到了程序员必备的github网站，发现了许多技术大牛。这些技术大牛几乎都有属于自己的个人网站，点进去一看更是有许多高深技术文章，这让我惊奇不已也让我羡慕，加上自己长久以来的想法，我决定开始做自己的博客。 照着网上许多已经有的教程，渐渐了解到了各种网站搭建框架，知道了原来搭建网站不一定要完全自主开发，最后选择了目前比较流行的hexo。学习把自己的博客布置到github上面而无需另置服务器，为了像大神一样有个专属域名，顺便了解了一下域名解析的知识，买了一个自己的域名并解析到github。在布置网页的过程中，发现了许多大神自制的酷炫的博客主题，最终选了这个简洁而有设计感的next，然后尝试在配置文件里只通过增改几个参数就能对博客做其它的配置和进行各种功能添加（我还不懂这是什么原理），几天下来，终于把博客弄成了满意的样子。 其实搭建博客的过程并不难，没有过多复杂的技术，只要照着步骤一步一步走就好，只不过为了搭这个博客，我终于详细地进行了一次git的学习，学了一点linux基础，弄清楚了git命令的各个方面，毕竟在之前我连git的最基本定义都弄不明白。另外还终于有了程序员必备的的github账号。github除了代码托管反而更像是一个程序员社交平台，上面有许多大神，还有各种酷炫的项目。如果说我以前的学习只是只是在一个狭小的圈子里，翻看了github我才发现有多少大神甚至初中生都已经把这个网站玩的这么溜了，另外还有许多跟我差不多大的人技术已经很厉害了，拥有众多令我瞠目结舌的个人项目，不乏许多目前已经就职于bat的大佬。总之，通过这几天的不断地在github上闲逛和翻看各种大神的博客，除了大开眼界之外，我真真切切地感受到了被碾压的感觉。 可是那又能如何呢，只怪自己没有早早地确定方向，在漫长的时光里，终日迷惘度日，浑浑噩噩，有许多机会和想法的确是被荒废了。我只是不愿意去相信，原来世界上真有那么多人在不断地为了自己喜欢的东西奋斗着，并且变得越来越好。我从来都是一个自作聪明的人，也总是在一厢情愿的自负着，天真的以为将来一定会变成什么厉害的人或者自然的获得某种成就。可是我明明也知道，很多东西如果不去认认真真地做，永远也无法取得所谓的成功。而我的矛盾在于，我始终在抱着这种自负的心理的同时被一些困难绊住了脚步，而不敢再多前进一步，这又何尝不是一种自卑呢。从前我缺少明确的目标，后来我有了目标，既然有了目标，就应该有了动力。那就去做吧，就如同夸父逐日一样，我只能不断让自己丢弃过多的想法，只坚定的做一件事，一项工作，让自己不要过于沉溺个人世界，多去看看外面的世界，看看许多人已经把你抛下好远好远，看看你是否甘心就这么沦落深渊，永远也得不到想要的东西，永远也比不上任何人。 我承认学计算机从未是我一直以来的兴趣所在，我也已经说了我从来没想过自己到底想要做什么。我只是碰巧对世界上大部分的事情抱有一点兴趣而已，我不想因为专注于一件工作而从此需要放弃其他的东西。而计算机的优势在于，它几乎涵盖了目前世界上的所有领域，我能通过这个技能去发现和拓展更多我感兴趣的内容，这让我很高兴。比如其实我很想学艺术，那么我就可以学网页设计（我也已经在学了，下一步我决定要像那些大神一样，用上自己开发设计的主题）。 但是我也明白，学习IT并不是一件容易的事，它覆盖的领域越多，需要学习的也就越多，万丈高楼的每一砖每一瓦都需要我自己去填补。然而我害怕的是，比我厉害的大佬已经跑了很远了，我才刚刚起步而且速度极慢，我可能永远也追不上这种差距。 我多想能有人能对我说，你就努力去做吧，现在一切都还不晚。 最后，我想说的是，除开这些徒有其表的样式功能之外，一个博客最重要的还是拥有内容啊！空无一物又有何意义，更不会像那些大神一样有众多关注。那就只能慢慢的写吧，一点点充实。不过说到底所谓内容还是要一些实质性的技术干货，这只能在自己的学习过程中慢慢总结了，就当作是对自己学习成长的记录吧。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[For the first time]]></title>
    <url>%2F2017%2F07%2F29%2FForever-J%2F</url>
    <content type="text"><![CDATA[Hello,World!This is my first post in my first personal blog.It is awesome that using the code to create something and change the world.I still have so much to learn.So,make progress every day.]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>first post</tag>
      </tags>
  </entry>
</search>
