<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J&#39;s BLOG</title>
  <subtitle>Sth must be said</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://forever-j.com/"/>
  <updated>2018-04-04T18:58:46.889Z</updated>
  <id>http://forever-j.com/</id>
  
  <author>
    <name>Joey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>J2EE基本概念</title>
    <link href="http://forever-j.com/2018/04/05/J2EE%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://forever-j.com/2018/04/05/J2EE基本概念/</id>
    <published>2018-04-04T18:40:40.000Z</published>
    <updated>2018-04-04T18:58:46.889Z</updated>
    
    <content type="html"><![CDATA[<p>JavaBean 是一种JAVA语言写成的可重用组件。为写成JavaBean，类必须是具体的和公共的，并且具有无参数的构造器。JavaBean 通过提供符合一致性设计模式的公共方法将内部域暴露成员属性，set和get方法获取。众所周知，属性名称<br>符合这种模式，其他Java 类可以通过自省机制(反射机制)发现和操作这些JavaBean 的属性。</p>
<p>POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。<br>使用POJO名称是为了避免和EJB混淆起来, 而且简称比较直接. 其中有一些属性及其getter setter方法的类,没有业务逻辑，有时可以作为VO(value -object)或dto(Data Transform Object)来使用.当然,如果你有一个简单的运算属性也是<br>可以的,但不允许有业务方法,也不能携带有connection之类的方法。</p>
<p>POJO是Plain OrdinaryJava Object的缩写不错，但是它通指没有使用Entity Beans的普通java对象，可以把POJO作为支持业务逻辑的协助类。<br>POJO实质上可以理解为简单的实体类，顾名思义POJO类的作用是方便程序员使用数据库中的数据表，对于广大的程序员，可以很方便的将POJO类当做对象来进行使用，当然也是可以方便的调用其get,set方法。POJO类也给我们在struts框<br>架中的配置带来了很大的方便。</p>
<p>POJO 和JavaBean是我们常见的两个关键字，一般容易混淆，POJO全称是Plain Ordinary Java Object / Pure Old Java Object，中文可以翻译成：普通Java类，具有一部分getter/setter方法的那种类就可以称作POJO，但是JavaBean则<br>比 POJO复杂很多， Java Bean 是可复用的组件，对 Java Bean 并没有严格的规范，理论上讲，任何一个 Java 类都可以是一个 Bean 。但通常情况下，由于 Java Bean 是被容器所创建（如 Tomcat) 的，所以 Java Bean 应具有一个无<br>参的构造器，另外，通常 Java Bean 还要实现 Serializable 接口用于实现 Bean 的持久性。 Java Bean 是不能被跨进程访问的。JavaBean是一种组件技术，就好像你做了一个扳子，而这个扳子会在很多地方被拿去用，这个扳子也提供<br>多种功能(你可以拿这个扳子扳、锤、撬等等)，而这个扳子就是一个组件。一般在web应用程序中建立一个数据库的映射对象时，我们只能称它为POJO。POJO(Plain Old Java Object)这个名字用来强调它是一个普通java对象，而不是一个<br>特殊的对象，其主要用来指代那些没有遵从特定的Java对象模型、约定或框架（如EJB）的Java对象。理想地讲，一个POJO是一个不受任何限制的Java对象（除了Java语言规范）</p>
<p>POJO = “Plain Old Java Object”，是MartinFowler等发明的一个术语，用来表示普通的Java对象，不是JavaBean, EntityBean 或者 SessionBean。POJO不担当任何特殊的角色，也不实现任何特殊的Java框架的接口如，EJB，JDBC等等。<br>即POJO是一个简单的普通的Java对象，它不包含业务逻辑或持久逻辑等，但不是JavaBean、EntityBean等，不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口。</p>
<p>EJB是sun的JavaEE服务器端组件模型，设计目标与核心应用是部署分布式应用程序。简单来说就是把已经编写好的程序（即：类）打包放在服务器上执行。凭借java跨平台的优势，用EJB技术部署的分布式系统可以不限于特定的平台。EJB<br>(Enterprise JavaBean)是J2EE(javaEE)的一部分，定义了一个用于开发基于组件的企业多重应用程序的标准。其特点包括网络服务支持和核心开发工具(SDK)。 在J2EE里，Enterprise Java Beans(EJB)称为Java 企业Bean，是Java的核心<br>代码，分别是会话Bean（Session Bean），实体Bean（Entity Bean）和消息驱动Bean（MessageDriven Bean）。在EJB3.0推出以后，实体Bean被单独分了出来，形成了新的规范JPA。<br>1.SessionBean用于实现业务逻辑，它可以是有状态的，也可以是无状态的。每当客户端请求时，容器就会选择一个SessionBean来为客户端服务。Session Bean可以直接访问数据库，但更多时候，它会通过Entity Bean实现数据访问。<br>2.Entity Bean是域模型对象，用于实现O/R映射，负责将数据库中的表记录映射为内存中的Entity对象，事实上，创建一个Entity Bean对象相当于新建一条记录，删除一个Entity Bean会同时从数据库中删除对应记录，修改一个Entity<br>Bean时，容器会自动将Entity Bean的状态和数据库同步。</p>
<p>SessionBean在J2EE应用程序中被用来完成一些服务器端的业务操作，例如访问数据库、调用其他EJB组件。EntityBean被用来代表应用系统中用到的数据。<br>SessionBean是一种非持久性对象,不会做持久化存储，只在一次会话中有效，会话结束则自动消除；而EntityBean是一种持久性对象，它代表一个存储在持久性存储器中的实体的对象视图，或是一个由现有企业应用程序实现的实体，会持<br>久化到关系数据库或其它持久存储中，即使容器或服务器失效，bean的状态数据仍然存在。<br>3.MessageDriven Bean是EJB2.0中引入的新的企业Bean，它基于JMS消息，只能接收客户端发送的JMS消息然后处理。MDB实际上是一个异步的无状态SessionBean，客户端调用MDB后无需等待，立刻返回，MDB将异步处理客户请求。这适合于<br>需要异步处理请求的场合，比如订单处理，这样就能避免客户端长时间的等待一个方法调用直到返回结果。<br>一个技术规范：EJB 从技术上而言不是一种”产品”,EJB 是一种描述了构建应用组件要解决的标准：<br>可扩展 (Scalable)<br>分布式 (Distributed)<br>事务处理(Transactional)<br>数据存储(Persistent)<br>安全性 (Secure)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaBean 是一种JAVA语言写成的可重用组件。为写成JavaBean，类必须是具体的和公共的，并且具有无参数的构造器。JavaBean 通过提供符合一致性设计模式的公共方法将内部域暴露成员属性，set和get方法获取。众所周知，属性名称&lt;br&gt;符合这种模式，其他Ja
    
    </summary>
    
    
      <category term="java" scheme="http://forever-j.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>愿流年可忆，未来可期</title>
    <link href="http://forever-j.com/2018/02/26/%E6%84%BF%E6%B5%81%E5%B9%B4%E5%8F%AF%E5%BF%86%EF%BC%8C%E6%9C%AA%E6%9D%A5%E5%8F%AF%E6%9C%9F/"/>
    <id>http://forever-j.com/2018/02/26/愿流年可忆，未来可期/</id>
    <published>2018-02-25T19:34:35.000Z</published>
    <updated>2018-02-25T19:42:21.847Z</updated>
    
    <content type="html"><![CDATA[<p>尽管我厌恶这种平庸而疲乏的生活。很多时候，的确是很难过了，累的不想做一切事，可是就这么静静看着时间流逝，也觉得自己的罪过又更深了。<br>其实我知道，这一切根本不算什么，我从未逼自己去达到某一个极限，往往不经意间的松懈就荒废了许多时间。我也知道可能再对自己狠一些，就能稍稍改变一些目前的现状。</p>
<p>我知道很多事情，但我尽量避免再去深究过多的东西，我不再想去发现这个世界的本质了，我怕我发现之后就再也不能好好生活了。就如同那些早早死去的诗人们，他们一定是发现了什么，于是利用死亡来解脱。可是我还不能死，也不想死。活还是要活下去的<br>基于这一点，在起伏不定的情绪中挣扎起来后，我只好又想办法如何能够活下去，这常常又让我感到无比的悲哀。我又是一个如此纠结的人。</p>
<p>今年的计划：<br>关于写作：<br>关于代码：</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管我厌恶这种平庸而疲乏的生活。很多时候，的确是很难过了，累的不想做一切事，可是就这么静静看着时间流逝，也觉得自己的罪过又更深了。&lt;br&gt;其实我知道，这一切根本不算什么，我从未逼自己去达到某一个极限，往往不经意间的松懈就荒废了许多时间。我也知道可能再对自己狠一些，就能稍稍改
    
    </summary>
    
    
      <category term="杂文" scheme="http://forever-j.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>关于生存</title>
    <link href="http://forever-j.com/2017/09/09/%E5%BC%80%E5%AD%A6%E4%BA%86/"/>
    <id>http://forever-j.com/2017/09/09/开学了/</id>
    <published>2017-09-09T13:38:03.000Z</published>
    <updated>2018-02-25T19:41:15.675Z</updated>
    
    <content type="html"><![CDATA[<p>来到上海半个多月了，一切事情算是有了结果，生活也应该渐渐稳定了。</p>
<p>我从来都不愿去诉说自己悲惨的生活和各式的遭遇，也不敢夸大自己付出了多少努力，有多少委屈。我只是一直以来都认为自己很清醒，认识到这就是生活，而生活从来都是不易的。我时刻记住这一点，并尽力摆脱自怜想法，从而让自己不断前进。</p>
<p>然而，如果问我来到上海后感受最深的一点是什么，那就是，从前的所谓贫困、奔波、劳累、等级、屈辱等等一切关于生活东西，从一个我脑中的认识变成了活生生的我要去面对的东西。很多东西你只有去亲身经历了，你才能拥有亲身的感受，这种感受从来都不是所谓书本文字可以传达的。如果说从前我知道的只是关于生活的想法，那么现在我所认知的一切就是关于生存了，那要远远的比生活更加严峻和艰难。而事实上，在此之前我是从未认真的对待过生活。从前的日子，或者按部就班，或者浑浑噩噩，或者顺其自然等等生活状态，如今看来都不算真正的生活。而现在，我却要迅速地跳出那种孩童般毫无目的的日子，然后变成一个所谓的大人，学会如何去生存。一个人一无所有，来面对所有的一切。</p>
<p>上海，人人都知道这是一座多么富饶的现代化的国际都市，它奢华而艳丽的外表吸引着无数人来投入它的怀抱，然而它却并不慷慨，不会轻易地和你分享它的财富。这是一座无比公平却又处处显露不公平的城市，它告诉你，人人都是平等的，只要你拥有足够的才华和足够的努力就一定能在此获得一席之地，然而我每天听到和看到的却是关于外地人和本地人之间无法打破的隔阂，富人和穷人之间不可逾越的鸿沟。<br>可是尽管如此，依然有无数人愿意把自己宝贵的年轻的时光都托付于此。一个城市之所以富饶和美丽从来不是因为少数富人精英的存在，而是因为有无数底层的普通人在支撑着这一切。这些普通人维护着这繁华而美丽的表象，他们置身于此仿佛也能拥有这种繁华和美丽，然后又用一个又一个的梦想继续成就这座城市。</p>
<p>因此，上海是梦幻的，它建立在无数虚幻而灿烂的梦想之上。</p>
<p>我就是这样一个无比普通的普通人，尽管我不想去承认。我说我自己还很年轻，我觉得自己一定是与众不同的，我还有那么多想要去做的事和去完成的梦想，可是你看看啊，我现在还是一无所有。这种一无所有让我找不到未来的方向。我们常常不是被困难给打倒的，而是被一种迷茫的毫无目的的生活所逼死的。因此，大部分时候我都很苦恼，很自卑，可是我又只能带着这些苦恼和自卑去生存去努力，尽所有让自己能摆脱这种贫困。后来，我最大的希望就是能够活得有尊严一些，经历那些屈辱的地方和事情，我不能忍受，比如在人很多的地方尝试蜗居没有一点隐私，比如一次又一次的面试被拒看不到前程，比如在香肠一样的地铁上被挤到窒息，比如在炎热的太阳下寻找一家便宜的餐馆，比如为了找一个像样的住处去无数不堪的地方。然而生命中有一些东西你必须要去经历的，更何况这种生活还是你自己的选择。我还是不愿意去抱怨什么，也不会去拒绝什么，我还是愿意去承认，这些事情会帮助我成长，能让生存转变为生活，然后也许生活就会慢慢变好了。</p>
<p>成年人的生活中没有容易两个字，更何况在上海这样的地方。没有人在此能轻易地松懈，可能你稍微表现出那么一点的疲惫，这个城市就把你推远了一些。这个城市那么多人，每日熙熙攘攘，车水马龙，这一切都是为了能够离这个城市近一些，再近一些。上海就像一个圆圈中的圆心，外围越多的人往里面挤，而接近圆心处的人就越少。生存是关于优胜劣汰的，关于物竞天择的，这种丛林法则在这个地方真是再适用不过了。这一点对所有人来说都是公平的，我们唯一能做的就是尊重这个法则，尽一切的力量让自己不被生活踩在脚下。</p>
<p>那些切切实实在奋斗的人们是值得尊敬的，而我也希望通过自己的努力得到这种尊敬。如今的我还正在寻找自己在这座城市生活下去的意义和价值，或许有一天我能觉得自己在这个城市是被需要的，那时我才会觉得这座城市真正地接纳了我，我才不会有卑微之感，我才会觉得自己真切地活着。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来到上海半个多月了，一切事情算是有了结果，生活也应该渐渐稳定了。&lt;/p&gt;
&lt;p&gt;我从来都不愿去诉说自己悲惨的生活和各式的遭遇，也不敢夸大自己付出了多少努力，有多少委屈。我只是一直以来都认为自己很清醒，认识到这就是生活，而生活从来都是不易的。我时刻记住这一点，并尽力摆脱自怜想
    
    </summary>
    
      <category term="随笔" scheme="http://forever-j.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="学校" scheme="http://forever-j.com/tags/%E5%AD%A6%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>html中name、id、class的区别</title>
    <link href="http://forever-j.com/2017/08/28/html%E4%B8%ADname%E4%B8%8Eid%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://forever-j.com/2017/08/28/html中name与id的区别/</id>
    <published>2017-08-28T10:52:40.000Z</published>
    <updated>2017-09-09T14:03:22.415Z</updated>
    
    <content type="html"><![CDATA[<p>name 属性用于在 JavaScript 中对元素进行引用，或者在表单提交之后，对表单数据进行引用。</p>
<p>html的name和id可以类比身份证的姓名和身份证编号<br>编号id具有唯一性，一个id只出现一次。<br>名称name具备可重复性，可以多次出现。<br>在css中两者都具备识别html元素的作用，name用点号.表示，id用井号#<br>一般name用于通用多次出现元素的样式定义，id用于唯一性元素样式定义。<a id="more"></a><br>在表单当中，由于有些控件具备多元素特性，例如radio checkbox等，使用id不便于表单数据的提交，此外浏览器会根据name来设定发送到服务器的request，因此在表单当中，用name来提交数据。<br>当然，在实际的html中，也完全可以不用id，用单独的class也可以起到代替id的作用。但是在js中，是无法通过class直接后去html元素的， 定义id便于相关操作。</p>
<p>id要符合标识的要求，比如大小写敏感，最好不要包含下划线（因为不兼容CSS）。而name基本上没有什么要求，甚至可以 用数字。table、tr、td、div、p、span、h1、li等元素一般用id。与表单相关的元素也可以赋ID值,  但为这些元素赋ID值的时候引用这些元素的方法就要变一下了，具体的如下：<br>赋name时引用元素的方式:  document.formName.inputName或document.frames(“frameName”)<br>赋id时引用元素的方式:  document.all.inputID或document.all.frameID<br>除去与表单相关的元素，只能赋id不能赋name，这些元素有body、li、a、table、tr、td、th、p、div、span、pre、dl、dt、dd、font、b等等<br>对于name和class来说意义是一样的。但是name主要是提交表单用的 ，而class是设置标签的类，用于指定元素属于何种样式的类，主要用来设置css样式的。但两种都可以用来识别css，推荐除了表单外都用class。</p>
<p>name的用途<br>    用途1: 主要是用于获取提交表单的某表单域信息， 作为可与服务器交互数据的HTML元素的服务器端的标示，比如input、select、textarea、框架元素(iframe、frame、 window的名字，用于在其他frame或window指定target ) 和button等，这些元素都与表单(框架元素作用于form的target)提交有关，浏 览器会根据name来设定发送到服务器的request， 在表单的接收页面只接收有name的元素,  所以赋ID的元素通过表单是接收不到值的。 我们可以在服务器端根据其Name通过Request.Params取得元素提交的值。在form里面，如果不指定Name，就不会发送到服务器端 。<br>    用途2: HTML元素Input type=’radio’分组，我们知道radio button控件在同一个分组类，check操作是mutex的，同一时间只能选中一个radio，这个分组就是根据相同的Name属性来实现的。<br>    用途3: 建立页面中的锚点，我们知道<a href="URL">link</a>是获得一个页面超级链接，如果不用href属性，而改用Name，如：<a name="PageBottom"></a>，我们就获得了一个页面锚点。<br>    用途4: 作为对象的Identity，如Applet、Object、Embed等元素。比如在Applet对象实例中，我们将使用其Name来引用该对象。<br>    用途5: 在IMG元素和MAP元素之间关联的时候，如果要定义IMG的热点区域，需要使用其属性usemap，使usemap=”#name”(被关联的MAP元素的Name)。<br>    用途6: 某些特定元素的属性，如attribute，meta和param。例如为Object定义参数<param name="appletParameter" value="value">或Meta中<meta name="Author" content="Dave Raggett">。<br>    当然HTML元素的Name属性在页面中也可以起那么一点ID的作用，因为在DHTML对象树中，我们可 以使用document.getElementsByName来获取一个包含页面中所有指定Name元素的对象数组。Name属性还有一个问题，当我们动 态创建可包含Name属性的元素时，不能简单的使用赋值element.name = “…”来添加其Name，而必须在创建Element时，使用document.createElement(‘<element name="myName"></element>‘)为元素添加Name属性。</p>
<ul>
<li><a href="https://wenku.baidu.com/view/a3fcdc976bec0975f465e2c4.html" target="_blank" rel="external">html中name与id的区别</a></li>
<li><a href="http://www.cnblogs.com/polk6/archive/2013/05/28/3101571.html" target="_blank" rel="external">HTML name、id、class 的区别</a></li>
<li><a href="http://afunti.iteye.com/blog/988562" target="_blank" rel="external">id name class 区别</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;name 属性用于在 JavaScript 中对元素进行引用，或者在表单提交之后，对表单数据进行引用。&lt;/p&gt;
&lt;p&gt;html的name和id可以类比身份证的姓名和身份证编号&lt;br&gt;编号id具有唯一性，一个id只出现一次。&lt;br&gt;名称name具备可重复性，可以多次出现。&lt;br&gt;在css中两者都具备识别html元素的作用，name用点号.表示，id用井号#&lt;br&gt;一般name用于通用多次出现元素的样式定义，id用于唯一性元素样式定义。
    
    </summary>
    
      <category term="前端" scheme="http://forever-j.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://forever-j.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>布尔属性</title>
    <link href="http://forever-j.com/2017/08/28/%E5%B8%83%E5%B0%94%E5%B1%9E%E6%80%A7/"/>
    <id>http://forever-j.com/2017/08/28/布尔属性/</id>
    <published>2017-08-27T17:36:45.000Z</published>
    <updated>2017-08-27T17:41:32.111Z</updated>
    
    <content type="html"><![CDATA[<p>布尔表达式（Boolean expression）是一段代码声明，它最终只有true（真）和false（假）两个取值。最简单的布尔表达式是等式（equality），这种布尔表达式用来测试一个值是否与另一个值相同。</p>
<p>布尔属性是控制元素的某一个状态，是一种比较特别的属性。由于浏览器商之前互相没协商好，因此在定义布尔属性时，也有差异。</p>
<p>布尔属性主要出现 在表单元素上，常见的有radio,checkbox上的checked属性，option元素的selected属性，文本域，文本区，密码域上的readonly属性，select元素上的multiple属性，</p>
<p>并且所有 表单元素都支持disabled属性。</p>
<p>我们在JS设置一个布尔属性是否发挥作用，通常直接设置true与false</p>
<p>input.disabled = false<br>由于布尔属性是一种固有属性，因此不能使用removeAttribute进行操作。</p>
<p>而在HTML中，只有我们设置了这个属性，不管它的值是什么，或者干脆就只有属性名，它都认为其值为true。</p>
<ul>
<li><a href="http://www.360doc.com/content/16/0119/12/29846386_529061391.shtml" target="_blank" rel="external">布尔属性</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布尔表达式（Boolean expression）是一段代码声明，它最终只有true（真）和false（假）两个取值。最简单的布尔表达式是等式（equality），这种布尔表达式用来测试一个值是否与另一个值相同。&lt;/p&gt;
&lt;p&gt;布尔属性是控制元素的某一个状态，是一种比较特别
    
    </summary>
    
      <category term="html" scheme="http://forever-j.com/categories/html/"/>
    
    
      <category term="html" scheme="http://forever-j.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>URL编码</title>
    <link href="http://forever-j.com/2017/08/27/URL%E7%BC%96%E7%A0%81/"/>
    <id>http://forever-j.com/2017/08/27/URL编码/</id>
    <published>2017-08-27T12:38:59.000Z</published>
    <updated>2017-08-27T12:50:52.684Z</updated>
    
    <content type="html"><![CDATA[<p>URL 只能使用 ASCII 字符集来通过因特网进行发送。<br>由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。<br>URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。<br>URL 不能包含空格。URL 编码通常使用 + 来替换空格。</p>
<p>JavaScript、PHP、ASP 都提供了对字符串进行URL编码的函数。<br>JavaScript 中使用 encodeURI() 函数，PHP 中使用 rawurlencode() 函数，ASP 中使用 Server.URLEncode() 函数。</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="external">关于URL编码</a></li>
<li><a href="http://www.runoob.com/tags/html-urlencode.html" target="_blank" rel="external">URL编码参考手册</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;URL 只能使用 ASCII 字符集来通过因特网进行发送。&lt;br&gt;由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。&lt;br&gt;URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。&lt;br&gt;URL 不能包含
    
    </summary>
    
      <category term="基础知识" scheme="http://forever-j.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="URL" scheme="http://forever-j.com/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>MIME参考手册</title>
    <link href="http://forever-j.com/2017/08/24/MIME%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/"/>
    <id>http://forever-j.com/2017/08/24/MIME参考手册/</id>
    <published>2017-08-23T18:13:57.000Z</published>
    <updated>2017-09-09T14:30:35.399Z</updated>
    
    <content type="html"><![CDATA[<p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。<br>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p>
<h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1><p>首先，我们要了解浏览器是如何处理内容的。在浏览器中显示的内容有 HTML、有 XML、有 GIF、还有 Flash ……那么，浏览器是如何区分它们，决定什么内容用什么形式来显示呢？答案是 MIME Type，也就是该资源的媒体类型。<br><a id="more"></a><br>媒体类型通常是通过 HTTP 协议，由 Web 服务器告知浏览器的，更准确地说，是通过 Content-Type 来表示的，例如:</p>
<p>Content-Type: text/HTML</p>
<p>表示内容是 text/HTML 类型，也就是超文本文件。为什么是“text/HTML”而不是“HTML/text”或者别的什么？MIME Type 不是个人指定的，是经过 ietf 组织协商，以 RFC 的形式作为建议的标准发布在网上的，大多数的 Web 服务器和用户代理都会支持这个规范 (顺便说一句，Email 附件的类型也是通过 MIME Type 指定的)。</p>
<p>通常只有一些在互联网上获得广泛应用的格式才会获得一个 MIME Type，如果是某个客户端自己定义的格式，一般只能以 application/x- 开头。</p>
<p>XHTML 正是一个获得广泛应用的格式，因此，在 RFC 3236 中，说明了 XHTML 格式文件的 MIME Type 应该是 application/xHTML+XML。</p>
<p>当然，处理本地的文件，在没有人告诉浏览器某个文件的 MIME Type 的情况下，浏览器也会做一些默认的处理，这可能和你在操作系统中给文件配置的MIME Type有关。比如在Windows下，打开注册表的“HKEY_LOCAL_MACHINESOFTWAREClassesMIMEDatabaseContent Type”主键，你可以看到所有MIME Type的配置信息。</p>
<h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>在把输出结果传送到浏览器上的时候，浏览器必须启动适当的应用程序来处理这个输出文档。这可以通过多种类型MIME（多功能网际邮件扩充协议）来完成。在HTTP中，MIME类型被定义在Content-Type header中。</p>
<p>例如，架设你要传送一个Microsoft Excel文件到客户端。那么这时的MIME类型就是“application/vnd.ms-excel”。在大多数实际情况中，这个文件然后将传送给Execl来处理（假设我们设定Execl为处理特殊MIME类型的应用程序）。在ASP中，设定MIME类型的方法是通过Response对象的ContentType属性。</p>
<h3 id="多媒体文件格式MIME"><a href="#多媒体文件格式MIME" class="headerlink" title="多媒体文件格式MIME"></a>多媒体文件格式MIME</h3><p>最早的HTTP协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。<br>MIME意为多目Internet邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被HTTP协议支持之后，它的意义就更为显著了。它使得HTTP传输的不仅是普通的文本，而变得丰富多彩。</p>
<p>每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。</p>
<h3 id="常见的MIME类型"><a href="#常见的MIME类型" class="headerlink" title="常见的MIME类型"></a>常见的MIME类型</h3><p>超文本标记语言文本 .html,.html text/html<br>普通文本 .txt text/plain<br>RTF文本 .rtf application/rtf<br>GIF图形 .gif image/gif<br>JPEG图形 .ipeg,.jpg image/jpeg<br>au声音文件 .au audio/basic<br>MIDI音乐文件 mid,.midi audio/midi,audio/x-midi<br>RealAudio音乐文件 .ra, .ram audio/x-pn-realaudio<br>MPEG文件 .mpg,.mpeg video/mpeg<br>AVI文件 .avi video/x-msvideo<br>GZIP文件 .gz application/x-gzip<br>TAR文件 .tar application/x-tar </p>
<p>Internet中有一个专门组织IANA来确认标准的MIME类型，但Internet发展的太快，很多应用程序等不及IANA来确认他们使用的MIME类型为标准类型。因此他们使用在类别中以x-开头的方法标识这个类别还没有成为标准，例如：x-gzip，x-tar等。事实上这些类型运用的很广泛，已经成为了事实标准。只要客户机和服务器共同承认这个MIME类型，即使它是不标准的类型也没有关系，客户程序就能根据MIME类型，采用具体的处理手段来处理数据。而Web服务器和浏览器（包括操作系统）中，缺省都设置了标准的和常见的MIME类型，只有对于不常见的 MIME类型，才需要同时设置服务器和客户浏览器，以进行识别。</p>
<p>由于MIME类型与文档的后缀相关，因此服务器使用文档的后缀来区分不同文件的MIME类型，服务器中必须定义文档后缀和MIME类型之间的对应关系。而客户程序从服务器上接收数据的时候，它只是从服务器接受数据流，并不了解文档的名字，因此服务器必须使用附加信息来告诉客户程序数据的MIME类型。服务器在发送真正的数据之前，就要先发送标志数据的MIME类型的信息，这个信息使用Content-type关键字进行定义，例如对于HTML文档，服务器将首先发送以下两行MIME标识信息,这个标识并不是真正的数据文件的一部分。<br>Content-type: text/html<br>注意，第二行为一个空行，这是必须的，使用这个空行的目的是将MIME信息与真正的数据内容分隔开。</p>
<p>官方的 MIME 信息是由 Internet Engineering Task Force (IETF) 在下面的文档中提供的：<br>RFC-822 Standard for ARPA Internet text messages<br>RFC-2045 MIME Part 1: Format of Internet Message Bodies<br>RFC-2046 MIME Part 2: Media Types<br>RFC-2047 MIME Part 3: Header Extensions for Non-ASCII Text<br>RFC-2048 MIME Part 4: Registration Procedures<br>RFC-2049 MIME Part 5: Conformance Criteria and Examples<br>不同的应用程序支持不同的 MIME 类型。</p>
<ul>
<li><a href="http://www.w3school.com.cn/media/media_mimeref.asp" target="_blank" rel="external">http://www.w3school.com.cn/media/media_mimeref.asp</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。&lt;br&gt;MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。&lt;/p&gt;
&lt;h1 id=&quot;一、&quot;&gt;&lt;a href=&quot;#一、&quot; class=&quot;headerlink&quot; title=&quot;一、&quot;&gt;&lt;/a&gt;一、&lt;/h1&gt;&lt;p&gt;首先，我们要了解浏览器是如何处理内容的。在浏览器中显示的内容有 HTML、有 XML、有 GIF、还有 Flash ……那么，浏览器是如何区分它们，决定什么内容用什么形式来显示呢？答案是 MIME Type，也就是该资源的媒体类型。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html表单</title>
    <link href="http://forever-j.com/2017/08/24/html%E8%A1%A8%E5%8D%95/"/>
    <id>http://forever-j.com/2017/08/24/html表单/</id>
    <published>2017-08-23T16:38:51.000Z</published>
    <updated>2017-08-27T14:21:26.666Z</updated>
    
    <content type="html"><![CDATA[<p>HTML表单用来对用户的操作作出反应，搜集不同类型的用户输入与后端进行通信，是形成动态页面的主要途径。</p>
<p><code>&lt;form&gt;</code>标签用于创建供用户输入的HTML表单，其主要作用是收集其中表单元素的提交内容，并根据不同属性作出不同的操作。表单元素虽然可以单独编写，但是<code>&lt;form&gt;</code>就是给页面上不同功能的表单分组的作用，并将其中的元素相关联，变成一个特定的收集用户提交内容的功能区块,它可以用来包括所有的其它的表单元素。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML表单用来对用户的操作作出反应，搜集不同类型的用户输入与后端进行通信，是形成动态页面的主要途径。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;标签用于创建供用户输入的HTML表单，其主要作用是收集其中表单元素的提交内容，并根据不同属性作出不同的操作
    
    </summary>
    
      <category term="前端" scheme="http://forever-j.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://forever-j.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>博客建成总结</title>
    <link href="http://forever-j.com/2017/08/08/post/"/>
    <id>http://forever-j.com/2017/08/08/post/</id>
    <published>2017-08-07T17:39:55.000Z</published>
    <updated>2017-08-23T16:32:23.943Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/chris-brignola-7766.jpg" alt=""></p>
<p>经过一个多星期的折腾才把这个个人博客给弄好了，想着必须要写点什么了。<a id="more"></a></p>
<p>其实能够拥有一个个人网站是我很早以前就有的梦想，那时候我还并未坚定地想要走IT这条路，对于这些编程、网页设计之类的技术总是觉得难以企及。而当时的我，越是觉得难就越是不愿或是不敢去认真学习。而现在看来从前大部分的失意皆不过是对于未来方向的迷惘，在一个人没有确定的方向时，他无法使出全部的力量，毕竟后来我们都不是高中生了，只为了高考一个目标奋斗。</p>
<p>而之所以选择IT这条路，虽然我不想承认，但是的确有跟风的心理，谁都知道现在互联网前景最好而且最赚钱，有那么多专业跟计算机不搭边的人都想要转到互联网行业了，更何况我的专业还是算计算机专业之内的。我是一个贪心的人，我想要去赚很多钱来满足我的各种经济需求，我想要去学习很多很多有趣的东西成为一个很酷的人，可是一个人的精力能有多少呢，有些梦想太过于虚幻而难以实现，也许我从来都未真正的弄清自己究竟想要什么，我只是一个自负而迷茫的傻瓜。所以，既然不知道以后要干嘛，那就跟风吧，毕竟大方向不会错还能赚钱；既然想要学的东西那么多，那就从最酷的学起吧，毕竟是高新科技，还能被外行投以惊奇和羡慕的目光。</p>
<p>当我后来慢慢决定了走这条路之后，我就不断地告诉自己，除了那些功利化的思想，更重要的是兴趣，兴趣才能让我走得更长久。我不得不承认，编程真的会令人感到快乐，特别是当成功地实现了某个功能或者解决了某个bug，获得的成就感让人浑身舒畅。我想我现在是真的喜欢做IT这件事了，这又酷又有趣，我愿意为它付出一辈子。</p>
<p>然而我现在依然是一个很菜的菜鸟，许多很基础的东西都不懂，这都是过去没有认真学习的错，我只能从头开始一点一点的前进。</p>
<p>而搭博客的事我从未想过，只不过是前几天在学习git的时候了解到了程序员必备的github网站，发现了许多技术大牛。这些技术大牛几乎都有属于自己的个人网站，点进去一看更是有许多高深技术文章，这让我惊奇不已也让我羡慕，加上自己长久以来的想法，我决定开始做自己的博客。</p>
<p>照着网上许多已经有的教程，渐渐了解到了各种网站搭建框架，知道了原来搭建网站不一定要完全自主开发，最后选择了目前比较流行的hexo。学习把自己的博客布置到github上面而无需另置服务器，为了像大神一样有个专属域名，顺便了解了一下域名解析的知识，买了一个自己的域名并解析到github。在布置网页的过程中，发现了许多大神自制的酷炫的博客主题，最终选了这个简洁而有设计感的next，然后尝试在配置文件里只通过增改几个参数就能对博客做其它的配置和进行各种功能添加（我还不懂这是什么原理），几天下来，终于把博客弄成了满意的样子。</p>
<p>其实搭建博客的过程并不难，没有过多复杂的技术，只要照着步骤一步一步走就好，只不过为了搭这个博客，我终于详细地进行了一次git的学习，学了一点linux基础，弄清楚了git命令的各个方面，毕竟在之前我连git的最基本定义都弄不明白。另外还终于有了程序员必备的的github账号。github除了代码托管反而更像是一个程序员社交平台，上面有许多大神，还有各种酷炫的项目。如果说我以前的学习只是只是在一个狭小的圈子里，翻看了github我才发现有多少大神甚至初中生都已经把这个网站玩的这么溜了，另外还有许多跟我差不多大的人技术已经很厉害了，拥有众多令我瞠目结舌的个人项目，不乏许多目前已经就职于bat的大佬。总之，通过这几天的不断地在github上闲逛和翻看各种大神的博客，除了大开眼界之外，我真真切切地感受到了被碾压的感觉。</p>
<p>可是那又能如何呢，只怪自己没有早早地确定方向，在漫长的时光里，终日迷惘度日，浑浑噩噩，有许多机会和想法的确是被荒废了。<strong>我只是不愿意去相信，原来世界上真有那么多人在不断地为了自己喜欢的东西奋斗着，并且变得越来越好。</strong>我从来都是一个自作聪明的人，也总是在一厢情愿的自负着，天真的以为将来一定会变成什么厉害的人或者自然的获得某种成就。可是我明明也知道，很多东西如果不去认认真真地做，永远也无法取得所谓的成功。而我的矛盾在于，我始终在抱着这种自负的心理的同时被一些困难绊住了脚步，而不敢再多前进一步，这又何尝不是一种自卑呢。从前我缺少明确的目标，后来我有了目标，既然有了目标，就应该有了动力。那就去做吧，就如同夸父逐日一样，我只能不断让自己丢弃过多的想法，只坚定的做一件事，一项工作，让自己不要过于沉溺个人世界，多去看看外面的世界，看看许多人已经把你抛下好远好远，看看你是否甘心就这么沦落深渊，永远也得不到想要的东西，永远也比不上任何人。</p>
<p>我承认学计算机从未是我一直以来的兴趣所在，我也已经说了我从来没想过自己到底想要做什么。我只是碰巧对世界上大部分的事情抱有一点兴趣而已，我不想因为专注于一件工作而从此需要放弃其他的东西。而计算机的优势在于，它几乎涵盖了目前世界上的所有领域，我能通过这个技能去发现和拓展更多我感兴趣的内容，这让我很高兴。比如其实我很想学艺术，那么我就可以学网页设计（我也已经在学了，下一步我决定要像那些大神一样，用上自己开发设计的主题）。</p>
<p>但是我也明白，学习IT并不是一件容易的事，它覆盖的领域越多，需要学习的也就越多，万丈高楼的每一砖每一瓦都需要我自己去填补。然而我害怕的是，比我厉害的大佬已经跑了很远了，我才刚刚起步而且速度极慢，我可能永远也追不上这种差距。</p>
<p>我多想能有人能对我说，你就努力去做吧，现在一切都还不晚。</p>
<blockquote>
<p>最后，我想说的是，除开这些徒有其表的样式功能之外，一个博客最重要的还是拥有内容啊！空无一物又有何意义，更不会像那些大神一样有众多关注。那就只能慢慢的写吧，一点点充实。<strong>不过说到底所谓内容还是要一些实质性的技术干货，这只能在自己的学习过程中慢慢总结了，就当作是对自己学习成长的记录吧。</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/chris-brignola-7766.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;经过一个多星期的折腾才把这个个人博客给弄好了，想着必须要写点什么了。
    
    </summary>
    
      <category term="记录" scheme="http://forever-j.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="随笔" scheme="http://forever-j.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>For the first time</title>
    <link href="http://forever-j.com/2017/07/29/Forever-J/"/>
    <id>http://forever-j.com/2017/07/29/Forever-J/</id>
    <published>2017-07-28T19:11:38.000Z</published>
    <updated>2017-08-23T16:32:23.942Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/Jordi001.jpg" alt="Jordi001"></p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello,World!"></a>Hello,World!<a id="more"></a></h2><p>This is my first post in my first personal blog.<br>It is awesome that using the code to create something and change the world.<br>I still have so much to learn.<br>So,make progress every day.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/Jordi001.jpg&quot; alt=&quot;Jordi001&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello,World!&quot;&gt;&lt;/a&gt;Hello,World!
    
    </summary>
    
      <category term="随笔" scheme="http://forever-j.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="first post" scheme="http://forever-j.com/tags/first-post/"/>
    
  </entry>
  
</feed>
